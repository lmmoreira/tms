services:
  tms-nginx:
    image: nginx:latest
    container_name: tms-nginx
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      tms-keycloak:
        condition: service_healthy
      tms-keycloak-oauth2-proxy:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/script.js:/etc/nginx/js/script.js
      - ./tmp/logs/NGINX:/var/log/nginx
    networks:
      - tms-network
  tms-keycloak-database:
    image: postgres:latest
    container_name: tms-keycloak-database
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: tms-keycloak
      POSTGRES_USER: tms-keycloak
      POSTGRES_PASSWORD: tms-password
      PGPORT: 5434
    volumes:
      - tms-keycloak-database:/var/lib/postgresql/data
    ports:
      - "5434:5434"
    networks:
      - tms-network
  tms-keycloak:
    image: bitnami/keycloak:latest
    container_name: tms-keycloak
    depends_on:
      - tms-keycloak-database
    environment:
      KEYCLOAK_LOG_LEVEL: debug
      KEYCLOAK_HTTP_PORT: 8000
      KEYCLOAK_BIND_ADDRESS: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KEYCLOAK_DATABASE_HOST: tms-keycloak-database
      KEYCLOAK_DATABASE_PORT: 5434
      KEYCLOAK_DATABASE_NAME: tms-keycloak
      KEYCLOAK_DATABASE_USER: tms-keycloak
      KEYCLOAK_DATABASE_PASSWORD: tms-password
      KEYCLOAK_EXTRA_ARGS: --import-realm
    volumes:
      - ./infra/keycloak/realms:/opt/bitnami/keycloak/data/import
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "-k", "-f", "http://localhost:8000/realms/tms-realm/.well-known/openid-configuration" ]
      interval: 10s
      timeout: 1s
      retries: 10
    networks:
      tms-network:
        aliases:
          - tms-keycloak-alias.127.0.0.1.nip.io
  tms-keycloak-oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: tms-keycloak-oauth2-proxy
    command: --config /oauth2-proxy.cfg
    ports:
      - 4180:4180
    volumes:
      - ./infra/oauth2/oauth2-proxy.cfg:/oauth2-proxy.cfg
    depends_on:
      tms-keycloak:
        condition: service_healthy
    networks:
      - tms-network
  tms-database:
    image: postgres:latest
    container_name: tms-database
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: tms
      POSTGRES_PASSWORD: tms
      POSTGRES_DB: tms
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    ports:
      - "5432:5432"
    volumes:
      - tms-database:/var/lib/postgresql/data
      - ./infra/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./infra/postgresql/init_pg_stat_statements.sql:/docker-entrypoint-initdb.d/init_pg_stat_statements.sql
    networks:
      - tms-network
  tms-database-pool:
    image: edoburu/pgbouncer:latest
    container_name: tms-database-pool
    ports:
      - "6432:6432"
    volumes:
      - ./infra/pgbouncer:/etc/pgbouncer
    depends_on:
      - tms-database
    networks:
      - tms-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h 127.0.0.1 -p 6432 -U tms -d tms || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
  tms-database-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: tms-database-exporter
    depends_on:
      - tms-database
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    volumes:
      - ./infra/database-exporter:/queries
    environment:
      DATA_SOURCE_URI: "tms-database:5432/tms?sslmode=disable"
      DATA_SOURCE_USER: tms
      DATA_SOURCE_PASS: tms
      PG_EXPORTER_EXTEND_QUERY_PATH: /queries/queries_pg_stat_statements.yaml
    command:
      - "--collector.stat_statements"
    ports:
      - "9187:9187"
    networks:
      - tms-network
  tms-broker:
    image: bitnami/rabbitmq:latest
    container_name: tms-broker
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - ./infra/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    environment:
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: "true"
      RABBITMQ_LOAD_DEFINITIONS: "true"
      RABBITMQ_PLUGINS: rabbitmq_management rabbitmq_prometheus
      RABBITMQ_DEFINITIONS_FILE: /etc/rabbitmq/definitions.json
    networks:
      - tms-network
  tms-flyway:
    image: flyway/flyway:latest
    container_name: tms-flyway
    command: -locations=filesystem:/flyway/sql -connectRetries=60 migrate
    volumes:
      - ./infra/database/migration:/flyway/sql
    depends_on:
      - tms-database
    environment:
      - FLYWAY_USER=tms
      - FLYWAY_PASSWORD=tms
      - FLYWAY_URL=jdbc:postgresql://tms-database:5432/tms
      - FLYWAY_SCHEMAS=flyway
    networks:
      - tms-network
  tms-otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: tms-otel-collector
    volumes:
      - ./tmp/logs/TMS:/var/log/tms
      - ./tmp/logs/NGINX:/var/log/nginx
      - ./infra/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: [ "--config", "/etc/otel-collector-config.yaml" ]
    depends_on:
      - tms-loki
    networks:
      tms-network:
        aliases:
          - tms-otel-collector-alias.127.0.0.1.nip.io
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
  tms-loki:
    image: grafana/loki:latest
    user: root
    container_name: tms-loki
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 10s
      retries: 6
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - tms-loki-data:/data
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tms-network
  tms-prometheus:
    container_name: tms-prometheus
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - tms-network
  tms-grafana:
    image: grafana/grafana:latest
    container_name: tms-grafana
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./infra/grafana/datasources/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./infra/grafana/dashboards/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/grafana-dashboards.yml
      - ./infra/grafana/dashboards/:/etc/grafana/provisioning/dashboards/
    depends_on:
      - tms-loki
    networks:
      - tms-network
  tms-minio:
    image: minio/minio:latest
    container_name: tms-minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - MINIO_ROOT_USER=tms-user
      - MINIO_ROOT_PASSWORD=tms-password
    volumes:
      - tms-minio-data:/data
      - ./infra/minio/create-bucket.sh:/usr/bin/create-bucket.sh
    ports:
      - "9000:9000"
      - "9001:9001"
    entrypoint: ["/bin/sh", "-c", "minio server /data --console-address ':9001' & sleep 5 && /usr/bin/create-bucket.sh && wait"]
    networks:
      - tms-network
  tms-jaeger:
    container_name: tms-jaeger
    image: jaegertracing/jaeger:latest
    ports:
      - "16686:16686"
      - "14317:4317" # OTLP gRPC receiver from jaeger new port '1'
      - "14318:4318" # OTLP http receiver from jaeger new port '1'
    networks:
      - tms-network

volumes:
  tms-minio-data:
  tms-database:
  tms-keycloak-database:
  tms-loki-data:

networks:
  tms-network:
    name: tms-network
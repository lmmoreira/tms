services:
  tms-nginx:
    image: nginx:latest
    container_name: tms-nginx
    depends_on:
      tms-keycloak:
        condition: service_healthy
      tms-keycloak-oauth2-proxy:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/script.js:/etc/nginx/js/script.js
    networks:
      - tms-network
  tms-keycloak-database:
    image: postgres:latest
    container_name: tms-keycloak-database
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: tms-keycloak
      POSTGRES_USER: tms-keycloak
      POSTGRES_PASSWORD: tms-password
      PGPORT: 5434
    volumes:
      - tms-keycloak-database:/var/lib/postgresql/data
    ports:
      - "5434:5434"
    networks:
      - tms-network
  tms-keycloak:
    image: bitnami/keycloak:latest
    container_name: tms-keycloak
    depends_on:
      - tms-keycloak-database
    environment:
      KEYCLOAK_LOG_LEVEL: debug
      KEYCLOAK_HTTP_PORT: 8000
      KEYCLOAK_BIND_ADDRESS: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KEYCLOAK_DATABASE_HOST: tms-keycloak-database
      KEYCLOAK_DATABASE_PORT: 5434
      KEYCLOAK_DATABASE_NAME: tms-keycloak
      KEYCLOAK_DATABASE_USER: tms-keycloak
      KEYCLOAK_DATABASE_PASSWORD: tms-password
      KEYCLOAK_EXTRA_ARGS: --import-realm
    volumes:
      - ./infra/keycloak/realms:/opt/bitnami/keycloak/data/import
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "-k", "-f", "http://localhost:8000/realms/tms-realm/.well-known/openid-configuration" ]
      interval: 10s
      timeout: 1s
      retries: 10
    networks:
      tms-network:
        aliases:
          - tms-keycloak-alias.127.0.0.1.nip.io
  tms-keycloak-oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: tms-keycloak-oauth2-proxy
    command: --config /oauth2-proxy.cfg
    ports:
      - 4180:4180
    volumes:
      - ./infra/oauth2/oauth2-proxy.cfg:/oauth2-proxy.cfg
    depends_on:
      tms-keycloak:
        condition: service_healthy
    networks:
      - tms-network
  tms-database:
    image: postgres:latest
    container_name: tms-database
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: tms
      POSTGRES_PASSWORD: tms
      POSTGRES_DB: tms
    ports:
      - "5432:5432"
    volumes:
      - tms-database:/var/lib/postgresql/data
    networks:
      - tms-network
  tms-broker:
    image: bitnami/rabbitmq:latest
    container_name: tms-broker
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./infra/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    environment:
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: "true"
      RABBITMQ_LOAD_DEFINITIONS: "true"
      RABBITMQ_DEFINITIONS_FILE: /etc/rabbitmq/definitions.json
    networks:
      - tms-network
  tms-flyway:
    image: flyway/flyway:latest
    container_name: tms-flyway
    command: -locations=filesystem:/flyway/sql -connectRetries=60 migrate
    volumes:
      - ./infra/database/migration:/flyway/sql
    depends_on:
      - tms-database
    environment:
      - FLYWAY_USER=tms
      - FLYWAY_PASSWORD=tms
      - FLYWAY_URL=jdbc:postgresql://tms-database:5432/tms
      - FLYWAY_SCHEMAS=flyway
    networks:
      - tms-network

volumes:
  tms-database:
  tms-keycloak-database:

networks:
  tms-network:
    name: tms-network